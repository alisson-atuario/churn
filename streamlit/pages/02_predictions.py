# Page: 02_predictions.py
from pathlib import Path
import sys

project_utils = Path(__file__).parent.parent
sys.path.append(str(project_utils))


import streamlit as st
from utils.data_loader import load_test_data

from utils.metrics import (
    get_model_predictions,
    calculate_model_metrics,
    get_confusion_matrix_values,
    create_risk_segments
)
from utils.plots import (
    plot_confusion_matrix,
    plot_roc_and_pr_curves,
    plot_probability_distribution_by_class,
    plot_risk_segments,
    plot_metrics_comparison_bar
)

st.set_page_config(
    page_title="Predi√ß√µes de Churn",
    page_icon="üéØ",
    layout="wide"
)

st.title("üéØ Performance do Modelo de Predi√ß√£o")
st.markdown("""
Avalia√ß√£o completa do modelo LightGBM: m√©tricas de classifica√ß√£o, an√°lise de erros 
e segmenta√ß√£o de clientes por n√≠vel de risco.
""")

# Carrega dados

def load_prediction_data():
    X_cal, y_cal, X_test, y_test, y_pred, y_pred_proba, y_pred_cal, y_pred_proba_cal = get_model_predictions()
    metrics = calculate_model_metrics(y_cal, y_pred_cal, y_pred_proba_cal)
    return X_cal, y_cal, X_test, y_test, y_pred, y_pred_proba, y_pred_cal, y_pred_proba_cal, metrics

try:
    X_cal, y_cal, X_test, y_test, y_pred, y_pred_proba, y_pred_cal, y_pred_proba_cal, metrics = load_prediction_data()
except Exception as e:
    st.error(f"Erro ao carregar dados: {str(e)}")
    st.stop()


#%% 1. KPIs Principais
st.header("1. M√©tricas de Performance")

with st.expander("Indicadores Chave", expanded=True):
    class_report = metrics['classification_report']
    
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("AUC-ROC", f"{metrics['auc_score']:.3f}")
    col2.metric("Precis√£o (Churn)", f"{class_report['1']['precision']:.3f}")
    col3.metric("Recall (Churn)", f"{class_report['1']['recall']:.3f}")
    col4.metric("F1-Score (Churn)", f"{class_report['1']['f1-score']:.3f}")
    
    st.info("""
    **Interpreta√ß√£o:**
    - **AUC-ROC**: Capacidade de separar churn de n√£o-churn (>0.75 = bom)
    - **Precis√£o**: Dos alertados como churn, quantos realmente cancelaram
    - **Recall**: Dos que cancelaram, quantos conseguimos detectar
    - **F1-Score**: Balan√ßo entre precis√£o e recall
    """)

#%% 2. Compara√ß√£o Visual de M√©tricas
st.header("2. Compara√ß√£o de M√©tricas por Classe")

with st.expander("Visualiza√ß√£o", expanded=True):
    st.plotly_chart(plot_metrics_comparison_bar(class_report))

#%% 3. Matriz de Confus√£o
st.header("3. An√°lise de Erros - Matriz de Confus√£o")

with st.expander("Visualiza√ß√£o", expanded=True):
    col_a, col_b = st.columns([2, 3])
    
    with col_a:
        st.plotly_chart(plot_confusion_matrix(metrics['confusion_matrix']))
    
    with col_b:
        st.markdown("### Interpreta√ß√£o dos Resultados")
        cm_values = get_confusion_matrix_values(metrics['confusion_matrix'])
        
        st.markdown(f"""
        **Verdadeiros Negativos (TN): {cm_values['true_negative']}**  
        Clientes que n√£o cancelaram e foram corretamente identificados ‚úÖ
        
        **Falsos Positivos (FP): {cm_values['false_positive']}**  
        Clientes que n√£o cancelaram, mas modelo alertou como risco  
        Custo: esfor√ßo de reten√ß√£o desperdi√ßado
        
        **Falsos Negativos (FN): {cm_values['false_negative']}**  
        Clientes que cancelaram mas n√£o foram detectados  
        Custo cr√≠tico: perda de receita
        
        **Verdadeiros Positivos (TP): {cm_values['true_positive']}**  
        Clientes em risco corretamente identificados ‚úÖ  
        Oportunidade de a√ß√£o preventiva
        """)
        
        # Calcula custos
        total_churn = cm_values['true_positive'] + cm_values['false_negative']
        taxa_deteccao = (cm_values['true_positive'] / total_churn * 100) if total_churn > 0 else 0
        
        st.success(f"Taxa de Detec√ß√£o de Churn: **{taxa_deteccao:.1f}%**")

#%% 4. Curvas de Performance
st.header("4. Curvas ROC e Precision-Recall")

with st.expander("Visualiza√ß√£o", expanded=True):
    st.plotly_chart(plot_roc_and_pr_curves(metrics))
    
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("""
        **Curva ROC**  
        Trade-off entre detectar churns (TPR) vs alertas falsos (FPR).  
        AUC pr√≥ximo de 1.0 = excelente separa√ß√£o.
        """)
    with col2:
        st.markdown("""
        **Curva Precision-Recall**  
        Mais relevante em dados desbalanceados.  
        Mostra qualidade dos alertas de churn.
        """)

#%% 5. Distribui√ß√£o de Probabilidades
st.header("5. Distribui√ß√£o das Probabilidades Preditas")

with st.expander("Visualiza√ß√£o", expanded=True):
    st.plotly_chart(plot_probability_distribution_by_class(y_test, y_pred_proba))
    
    st.info("""
    **An√°lise ideal:**
    - Pico azul (n√£o-churn) √† esquerda: modelo confiante que n√£o v√£o cancelar
    - Pico vermelho (churn) √† direita: modelo confiante que v√£o cancelar
    - Boa separa√ß√£o = modelo consegue distinguir bem os grupos
    """)

#%% 6. Segmenta√ß√£o de Risco
st.header("6. Segmenta√ß√£o de Clientes por N√≠vel de Risco")

with st.expander("An√°lise", expanded=True):
    risk_summary = create_risk_segments(y_pred_proba, y_test)
    
    col1, col2 = st.columns([3, 2])
    
    with col1:
        st.plotly_chart(plot_risk_segments(risk_summary))
    
    with col2:
        st.markdown("### Resumo por Segmento")
        st.dataframe(risk_summary)
    
    # Insights din√¢micos
    alto_risco = risk_summary.loc['Alto Risco']
    medio_risco = risk_summary.loc['M√©dio Risco']
    baixo_risco = risk_summary.loc['Baixo Risco']
    
    st.success(f"""
    **Recomenda√ß√µes de A√ß√£o:**
    
    üî¥ **Alto Risco**: {int(alto_risco['Total Clientes'])} clientes 
    ({alto_risco['Taxa Churn Real (%)']:.1f}% taxa real de churn)  
    ‚Üí A√ß√£o imediata: contato proativo, ofertas personalizadas
    
    üü° **M√©dio Risco**: {int(medio_risco['Total Clientes'])} clientes 
    ({medio_risco['Taxa Churn Real (%)']:.1f}% taxa real de churn)  
    ‚Üí Monitoramento: campanhas preventivas, pesquisas de satisfa√ß√£o
    
    üü¢ **Baixo Risco**: {int(baixo_risco['Total Clientes'])} clientes 
    ({baixo_risco['Taxa Churn Real (%)']:.1f}% taxa real de churn)  
    ‚Üí Manuten√ß√£o: comunica√ß√£o regular, programas de fidelidade
    """)

#%% 7. Navega√ß√£o
st.markdown("---")
st.markdown("## Navega√ß√£o")

col_nav1, col_nav2, col_nav3 = st.columns(3)

with col_nav1:
    if st.button("‚Üê Voltar para Exploratory"):
        st.switch_page("pages/01_exploratory.py")

with col_nav2:
    if st.button("Ir para Simulador ‚Üí"):
        st.switch_page("pages/03_simulator.py")

with col_nav3:
    if st.button("üè† Home"):
        st.switch_page("00_home.py")

X_test, y_test = load_test_data()
print(len(X_test))

# Rodap√©
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <i>Dashboard de An√°lise de Churn | Desenvolvido por Alisson Ursulino</i>
</div>
""", unsafe_allow_html=True)